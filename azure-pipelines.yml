trigger:
- '*'

variables:
  solution: 'FoodOrdering.sln'
  webProject: 'FoodOrdering/FoodOrdering.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'drop'
  deploymentPackage: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'

stages:
- stage: Build
  displayName: 'Build and Package Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: 'Run Automated Tests'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\$(buildConfiguration)\*.Test.dll
          !**\obj\**
        runInParallel: true

    - task: ArchiveFiles@2
      displayName: 'Package Build Artifacts'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(deploymentPackage)'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(deploymentPackage)'
        ArtifactName: '$(artifactName)'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - deployment: DevDeploy
    displayName: 'Deploy to Development Environment'
    environment: dev
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: $(artifactName)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service (Dev)'
            inputs:
              azureSubscription: 'Azure subscription 1'
              appName: 'food-ordering-dev'
              package: '$(Pipeline.Workspace)/$(artifactName)/$(artifactName).zip'
              deploymentMethod: 'zipDeploy'

- stage: Staging
  displayName: 'Staging Deployment'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - deployment: StagingDeploy
    displayName: 'Deploy to Staging Environment'
    environment: staging
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: $(artifactName)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service (Staging)'
            inputs:
              azureSubscription: 'Azure subscription 1'
              appName: 'food-ordering-staging'
              package: '$(Pipeline.Workspace)/$(artifactName)/$(artifactName).zip'
              deploymentMethod: 'zipDeploy'

- stage: Production
  displayName: 'Production Deployment'
  dependsOn: Staging
  condition: succeeded()
  jobs:
  - deployment: ProdDeploy
    displayName: 'Deploy to Production Environment'
    environment: production
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: $(artifactName)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service (Production)'
            inputs:
              azureSubscription: 'Azure subscription 1'
              appName: 'food-ordering-prod'
              package: '$(Pipeline.Workspace)/$(artifactName)/$(artifactName).zip'
              deploymentMethod: 'zipDeploy'